import openpyxl
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np

# Function to validate the budget data and organize it by month
def validate_budget_data_by_month(file_path):
    wb = openpyxl.load_workbook(file_path)
    
    validation_results = {}
    
    for sheet_name in wb.sheetnames:
        sheet = wb[sheet_name]
        
        monthly_data = {month: [] for month in range(1, 13)}  # Months 1 to 12
        invalid_rows = []
        
        for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):  # skip header row
            row_data = [cell.value for cell in row]
            valid = True
            
            if not isinstance(row_data[0], str) or len(row_data[0].strip()) == 0:
                invalid_rows.append(f"Row {row[0].row} - Column A (Category) is invalid.")
                valid = False
            if not isinstance(row_data[1], (int, float)) or row_data[1] <= 0:
                invalid_rows.append(f"Row {row[0].row} - Column B (Planned Amount) is not a valid number or is non-positive.")
                valid = False
            if not isinstance(row_data[2], (int, float)) or row_data[2] < 0:
                invalid_rows.append(f"Row {row[0].row} - Column C (Actual Amount) is not a valid number or is negative.")
                valid = False
            try:
                date = datetime.strptime(row_data[3], "%Y-%m-%d")
            except (ValueError, TypeError):
                invalid_rows.append(f"Row {row[0].row} - Column D (Date) is not a valid date format (YYYY-MM-DD).")
                valid = False
            
            if valid:
                status = "On Budget" if row_data[2] <= row_data[1] else "Over Budget"
                row_data.append(status)
                month = date.month
                monthly_data[month].append(row_data)
        
        validation_results[sheet_name] = {
            "invalid_rows": invalid_rows,
            "monthly_data": monthly_data
        }
    
    return validation_results

# Function to create an Excel file with separate sheets for each month
def create_monthly_budget_excel(validation_results, output_file):
    wb = openpyxl.Workbook()
    
    for sheet_name, results in validation_results.items():
        for month, data in results["monthly_data"].items():
            month_name = datetime(1900, month, 1).strftime('%B')
            if month_name not in wb.sheetnames:
                sheet = wb.create_sheet(month_name)
                sheet.append(["Category", "Planned Amount", "Actual Amount", "Date", "Status"])
            
            sheet = wb[month_name]
            for row in data:
                sheet.append(row)
    
    if "Sheet" in wb.sheetnames:
        del wb["Sheet"]
    
    wb.save(output_file)

# Function to generate a graph comparing Planned vs. Actual Spending
def generate_budget_vs_actual_graph(validation_results, output_image):
    # Prepare data for the graph
    categories = []
    planned_amounts = []
    actual_amounts = []
    
    for sheet_name, results in validation_results.items():
        for month, data in results["monthly_data"].items():
            for row in data:
                category = row[0]
                planned = row[1]
                actual = row[2]
                
                if category not in categories:
                    categories.append(category)
                    planned_amounts.append(planned)
                    actual_amounts.append(actual)
                else:
                    idx = categories.index(category)
                    planned_amounts[idx] += planned
                    actual_amounts[idx] += actual
    
    # Generate the bar plot
    x = np.arange(len(categories))  # The label locations
    width = 0.35  # The width of the bars
    
    fig, ax = plt.subplots()
    rects1 = ax.bar(x - width/2, planned_amounts, width, label='Planned Amount')
    rects2 = ax.bar(x + width/2, actual_amounts, width, label='Actual Amount')
    
    ax.set_xlabel('Category')
    ax.set_ylabel('Amount')
    ax.set_title('Budget vs Actual Spending by Category')
    ax.set_xticks(x)
    ax.set_xticklabels(categories, rotation=45)
    ax.legend()
    
    fig.tight_layout()
    
    # Save the graph as an image
    plt.savefig(output_image)

# Function to send an email with the validated Excel file and graph image as attachments
def send_email(subject, body, to_email, excel_file, image_file):
    from_email = "your_email@example.com"
    password = "your_password"
    
    server = smtplib.SMTP("smtp.example.com", 587)
    server.starttls()
    server.login(from_email, password)
    
    message = MIMEMultipart()
    message["From"] = from_email
    message["To"] = to_email
    message["Subject"] = subject
    
    message.attach(MIMEText(body, "plain"))
    
    with open(excel_file, "rb") as file:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(file.read())
        encoders.encode_base64(part)
        part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(excel_file)}")
        message.attach(part)
    
    with open(image_file, "rb") as image:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(image.read())
        encoders.encode_base64(part)
        part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(image_file)}")
        message.attach(part)
    
    server.sendmail(from_email, to_email, message.as_string())
    server.quit()

# Main function to execute the workflow
def main():
    file_path = "your_budget_file.xlsx"
    
    # Validate the budget data and organize it by month
    validation_results = validate_budget_data_by_month(file_path)
    
    # Create a new Excel file with monthly sheets
    output_excel_file = "monthly_budget_data.xlsx"
    create_monthly_budget_excel(validation_results, output_excel_file)
    
    # Generate the Budget vs Actual Spending graph
    output_image_file = "budget_vs_actual.png"
    generate_budget_vs_actual_graph(validation_results, output_image_file)
    
    # Create email content
    subject = "Monthly Validated Budget Tracker with Graph"
    body = "Please find the validated budget tracker and graph comparing planned vs. actual spending attached."
    
    # Send the email with the validated budget tracker Excel file and graph image attached
    send_email(subject, body, "recipient_email@example.com", output_excel_file, output_image_file)
    
    print("Email with the validated monthly budget tracker and graph sent successfully!")

# Run the main function
if __name__ == "__main__":
    main()
